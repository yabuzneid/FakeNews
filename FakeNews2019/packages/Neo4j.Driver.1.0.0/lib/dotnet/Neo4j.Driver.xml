<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neo4j.Driver</name>
    </assembly>
    <members>
        <member name="T:Neo4j.Driver.V1.IAuthToken">
            <summary>
                An authentication token is used to authenticate with a Neo4j instance. 
                It usually contains a <c>Principal</c>, for instance a username, and one or more <c>Credentials</c>, for instance a password.
                See <see cref="T:Neo4j.Driver.V1.AuthTokens" /> for available types of <see cref="T:Neo4j.Driver.V1.IAuthToken"/>s.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)" />
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.AuthTokens">
            <summary>
                This provides methods to create <see cref="T:Neo4j.Driver.V1.IAuthToken"/>s for various authentication schemes supported by this driver. 
                The scheme used must be also supported by the Neo4j instance you are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)" />
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.AuthTokens.None">
            <summary>
                Gets an authentication token that can be used to connect to Neo4j instances with auth disabled.
                This will only work if authentication is disabled on the Neo4j Instance we are connecting to.
            </summary>
            <remarks>
                <see cref="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)" />
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.V1.AuthTokens.Basic(System.String,System.String)">
            <summary>
                The basic authentication scheme, using a username and a password.
            </summary>
            <param name="username">This is the "principal", identifying who this token represents.</param>
            <param name="password">This is the "credential", proving the identity of the user.</param>
            <returns>An authentication token that can be used to connect to Neo4j.</returns>
            <remarks>
                <see cref="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)" />
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.IDriver">
            <summary>
                The <see cref="T:Neo4j.Driver.V1.IDriver"/> instance maintains the connections with a Neo4j database, providing an access point via the
                <see cref="M:Neo4j.Driver.V1.IDriver.Session" /> method.
            </summary>
            <remarks>
                The Driver maintains a session pool buffering the <see cref="T:Neo4j.Driver.V1.ISession" />s created by the user. 
                The size of the buffer can be configured by the <see cref="P:Neo4j.Driver.V1.Config.MaxIdleSessionPoolSize" /> property on the <see cref="T:Neo4j.Driver.V1.Config" /> when creating the Driver.
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.IDriver.Uri">
            <summary>
                Gets the <see cref="P:Neo4j.Driver.V1.IDriver.Uri" /> of the Neo4j database.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.IDriver.Session">
            <summary>
                Establish a session with Neo4j instance.
            </summary>
            <returns>
                An <see cref="T:Neo4j.Driver.V1.ISession" /> that could be used to <see cref="M:Neo4j.Driver.V1.IStatementRunner.Run(Neo4j.Driver.V1.Statement)" /> a statement or begin a
                transaction.
            </returns>
        </member>
        <member name="T:Neo4j.Driver.V1.Neo4jException">
            <summary>
            The base class for all Neo4j exceptions.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Neo4jException.Code">
            <summary>
            Gets or sets the code of a Neo4j exception.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.ClientException">
            <summary>
            A <see cref="T:Neo4j.Driver.V1.ClientException"/> indicates that the client has carried out an operation incorrectly.
            The error code provided can be used to determine further detail for the problem.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.TransientException">
            <summary>
            A <see cref="T:Neo4j.Driver.V1.TransientException"/> signals a failed operation that may be able to succeed 
            if this operation is retried without any intervention by application-level functionality. 
            The error code provided can be used to determine further details for the problem.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.DatabaseException">
            <summary>
            A <see cref="T:Neo4j.Driver.V1.DatabaseException"/> indicates that there is a problem within the underlying database.
            The error code provided can be used to determine further detail for the problem.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.INotification">
            <summary>
            Representation for notifications found when executing a statement.
            
            A notification can be visualized in a client pinpointing problems or other information about the statement.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INotification.Code">
             <summary>
            Gets a notification code for the discovered issue.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INotification.Title">
             <summary>
            Gets a short summary of the notification.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INotification.Description">
             <summary>
            Gets a longer description of the notification.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INotification.Position">
             <summary>
            Gets the position in the statement where this notification points to.
            Not all notifications have a unique position to point to and in that case the position would be set to all 0s.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INotification.Severity">
            <summary>
            Gets The severity level of the notification.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IInputPosition">
            <summary>
            An input position refers to a specific character in a statement.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IInputPosition.Offset">
            <summary>
            Gets the character offset referred to by this position; offset numbers start at 0.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IInputPosition.Line">
            <summary>
            Gets the line number referred to by the position; line numbers start at 1.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IInputPosition.Column">
            <summary>
            Gets the column number referred to by the position; column numbers start at 1.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IEntity">
            <summary>
            Represents an <c>Entity</c> in the Neo4j graph database. An <c>Entity</c> could be a <c>Node</c> or a <c>Relationship</c>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IEntity.Item(System.String)">
            <summary>
            Gets the value that has the specified key in <see cref="P:Neo4j.Driver.V1.IEntity.Properties"/>.
            </summary>
            <param name="key">The key.</param>
            <returns>The value specified by the given key in <see cref="P:Neo4j.Driver.V1.IEntity.Properties"/>.</returns>
        </member>
        <member name="P:Neo4j.Driver.V1.IEntity.Properties">
            <summary>
            Gets the properties of the entity.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IEntity.Id">
            <summary>
            Get the identity as a <see cref="T:System.Int64"/> number.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.INode">
            <summary>
            Represents a <c>Node</c> in the Neo4j graph database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.INode.Labels">
            <summary>
            Gets the lables of the node.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IRelationship">
            <summary>
            Represents a <c>Relationship</c> in the Neo4j graph database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IRelationship.Type">
            <summary>
            Gets the type of the relationship.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IRelationship.StartNodeId">
            <summary>
            Gets the id of the start node of the relationship.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IRelationship.EndNodeId">
            <summary>
            Gets the id of the end node of the relationship.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IPath">
            <summary>
                A <c>Path</c> is a directed sequence of relationships between two nodes. This generally
                represents a <em>traversal</em> or <em>walk</em> through a graph and maintains a direction separate
                from that of any relationships traversed.
                It is allowed to be of size 0, meaning there are no relationships in it. In this case,
                it contains only a single node which is both the start and the end of the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPath.Start">
            <summary>
            Gets the start <see cref="T:Neo4j.Driver.V1.INode"/> in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPath.End">
            <summary>
            Gets the end <see cref="T:Neo4j.Driver.V1.INode"/> in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPath.Nodes">
            <summary>
            Gets all the nodes in the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPath.Relationships">
            <summary>
            Gets all the relationships in the path.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.EncryptionLevel">
            <summary>
            Control the level of encryption to require.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.Config">
            <summary>
            Use this class to config the <see cref="T:Neo4j.Driver.V1.IDriver"/>.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.V1.Config.InfiniteMaxIdleSessionPoolSize">
            <summary>
            When the <see cref="P:Neo4j.Driver.V1.Config.MaxIdleSessionPoolSize"/> is set to <see cref="F:Neo4j.Driver.V1.Config.InfiniteMaxIdleSessionPoolSize" />, the idle session pool will pool all sessions created by the driver.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Config.DefaultConfig">
            <summary>
            Returns the default configuration for the <see cref="T:Neo4j.Driver.V1.IDriver"/>.
            </summary>
            <remarks>
            The defaults are <br/>
            <list type="bullet">
            <item><see cref="P:Neo4j.Driver.V1.Config.EncryptionLevel"/> : <c><see cref="P:Neo4j.Driver.V1.Config.EncryptionLevel"/> None</c> </item>
            <item><see cref="P:Neo4j.Driver.V1.Config.Logger"/> : <c>DebugLogger</c> at <c><see cref="T:Neo4j.Driver.V1.LogLevel"/> Info</c> </item>
            <item><see cref="P:Neo4j.Driver.V1.Config.MaxIdleSessionPoolSize"/> : <c>10</c> </item>
            </list>
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.Config.Builder">
            <summary>
            Create an instance of <see cref="T:Neo4j.Driver.V1.IConfigBuilder"/> to build a <see cref="T:Neo4j.Driver.V1.Config"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Config.EncryptionLevel">
            <summary>
            Gets or sets the use of encryption for all the connections created by the <see cref="T:Neo4j.Driver.V1.IDriver"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Config.Logger">
            <summary>
            Gets or sets the <see cref="T:Neo4j.Driver.V1.ILogger"/> instance to be used by the <see cref="T:Neo4j.Driver.V1.ISession"/>s.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Config.MaxIdleSessionPoolSize">
            <summary>
            Gets or sets the max idle session pool size.
            </summary>
            <remarks> 
            The max idle session pool size represents the maximum number of sessions buffered by the driver. 
            A buffered <see cref="T:Neo4j.Driver.V1.ISession"/> is a session that has already been connected to the database instance and doesn't need to re-initialize.
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.IConfigBuilder">
            <summary>
            Provides a way to generate a <see cref="T:Neo4j.Driver.V1.Config"/> instance fluently.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.IConfigBuilder.ToConfig">
            <summary>
            Builds the <see cref="T:Neo4j.Driver.V1.Config"/> instance based on the previously set values.
            </summary>
            <remarks>>
            If no value was set for a property the defaults specified in <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig"/> will be used.
            </remarks>
            <returns>A <see cref="T:Neo4j.Driver.V1.Config"/> instance.</returns>
        </member>
        <member name="M:Neo4j.Driver.V1.IConfigBuilder.WithEncryptionLevel(Neo4j.Driver.V1.EncryptionLevel)">
            <summary>
            Sets the <see cref="T:Neo4j.Driver.V1.Config"/> to use TLS if <paramref name="level"/> is <c>true</c>.
            </summary>
            <param name="level"><see cref="F:Neo4j.Driver.V1.EncryptionLevel.Encrypted"/> enables TLS for the connection, <see cref="F:Neo4j.Driver.V1.EncryptionLevel.None"/> otherwise. See <see cref="T:Neo4j.Driver.V1.EncryptionLevel"/> for more info</param>.
            <returns>An <see cref="T:Neo4j.Driver.V1.IConfigBuilder"/> instance for further configuration options.</returns>
            <remarks>Must call <see cref="M:Neo4j.Driver.V1.IConfigBuilder.ToConfig"/> to generate a <see cref="T:Neo4j.Driver.V1.Config"/> instance.</remarks>
        </member>
        <member name="M:Neo4j.Driver.V1.IConfigBuilder.WithLogger(Neo4j.Driver.V1.ILogger)">
            <summary>
            Sets the <see cref="T:Neo4j.Driver.V1.Config"/> to use a given <see cref="T:Neo4j.Driver.V1.ILogger"/> instance.
            </summary>
            <param name="logger">The <see cref="T:Neo4j.Driver.V1.ILogger"/> instance to use, if <c>null</c> no logging will occur.</param>
            <returns>An <see cref="T:Neo4j.Driver.V1.IConfigBuilder"/> instance for further configuration options.</returns>
            <remarks>Must call <see cref="M:Neo4j.Driver.V1.IConfigBuilder.ToConfig"/> to generate a <see cref="T:Neo4j.Driver.V1.Config"/> instance.</remarks>
        </member>
        <member name="M:Neo4j.Driver.V1.IConfigBuilder.WithMaxIdleSessionPoolSize(System.Int32)">
            <summary>
            Sets the size of the idle session pool.
            </summary>
            <param name="size">The size of the <see cref="P:Neo4j.Driver.V1.Config.MaxIdleSessionPoolSize"/>, set to <see cref="F:Neo4j.Driver.V1.Config.InfiniteMaxIdleSessionPoolSize"/> to pool all sessions.</param>
            <returns>An <see cref="T:Neo4j.Driver.V1.IConfigBuilder"/> instance for further configuration options.</returns>
            <remarks>Must call <see cref="M:Neo4j.Driver.V1.IConfigBuilder.ToConfig"/> to generate a <see cref="T:Neo4j.Driver.V1.Config"/> instance.</remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.GraphDatabase">
            <summary>
                Creates <see cref="T:Neo4j.Driver.V1.IDriver" /> instances, optionally letting you
                configure them.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.Uri,Neo4j.Driver.V1.Config)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The <see cref="T:System.Uri" /> to the Neo4j instance. Should be in the form
                <c>bolt://&lt;server location&gt;:&lt;port&gt;</c>. If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
            </param>
            <param name="config">
                Configuration for the driver instance to use, if <c>null</c> <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig" />
                is used.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.V1.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.Config)">
            <summary>
                Returns a driver for a Neo4j instance with default configuration settings.
            </summary>
            <param name="uri">
                The URI to the Neo4j instance. Should be in the form
                <c>bolt://&lt;server location&gt;:&lt;port&gt;</c>. If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.
            </param>
            <param name="config">
                Configuration for the driver instance to use, if <c>null</c> <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig" />
                is used.
            </param>
            <returns>A new <see cref="T:Neo4j.Driver.V1.IDriver" /> instance specified by the <paramref name="uri" />.</returns>
            <remarks>Ensure you provide the protocol for the <paramref name="uri" />.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="uri" /> is <c>null</c>.</exception>
        </member>
        <member name="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.String,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)">
            <summary>
                Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">
                The <see cref="T:System.Uri" /> to the Neo4j instance. Should be in the form
                <c>bolt://&lt;server location&gt;:&lt;port&gt;</c>. If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.</param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.V1.AuthTokens" />.</param>
            <param name="config">
                Configuration for the driver instance to use, if <c>null</c> <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig" />
                is used.
            </param>
            <returns>A new driver to the database instance specified by the <paramref name="uri"/>.</returns>
        </member>
        <member name="M:Neo4j.Driver.V1.GraphDatabase.Driver(System.Uri,Neo4j.Driver.V1.IAuthToken,Neo4j.Driver.V1.Config)">
            <summary>
                Returns a driver for a Neo4j instance with custom configuration.
            </summary>
            <param name="uri">        
                The URI to the Neo4j instance. Should be in the form
                <c>bolt://&lt;server location&gt;:&lt;port&gt;</c>. If <c>port</c> is not supplied the default of <c>7687</c> will
                be used.</param>
            <param name="authToken">Authentication to use, <see cref="T:Neo4j.Driver.V1.AuthTokens" />.</param>
            <param name="config">
                Configuration for the driver instance to use, if <c>null</c> <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig" />
                is used.
            </param>
            <returns>A new driver to the database instance specified by the <paramref name="uri"/>.</returns>
        </member>
        <member name="T:Neo4j.Driver.V1.IPlan">
             <summary>
             This describes the <c>Plan</c> that the database planner produced and used (or will use) to execute your statement.
             This can be extremely helpful in understanding what a statement is doing, and how to optimize it. For more
             details, see the Neo4j Manual.
            
             The plan for the statement is a tree of plans - each sub-tree containing zero or more child plans. The statement
             starts with the root plan. Each sub-plan is of a specific <see cref="P:Neo4j.Driver.V1.IPlan.OperatorType"/>, which describes
             what that part of the plan does - for instance, perform an index lookup or filter results. The Neo4j Manual contains
             a reference of the available operator types, and these may differ across Neo4j versions.
            
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPlan.OperatorType">
            <summary>
            Gets the operation this plan is performing.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPlan.Arguments">
            <summary>
            Gets the arguments for the <see cref="P:Neo4j.Driver.V1.IPlan.OperatorType"/> used.
            
            Many <see cref="P:Neo4j.Driver.V1.IPlan.OperatorType"/> have arguments defining their specific behavior. This map contains
            those arguments.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPlan.Identifiers">
             <summary>
             Gets a list of identifiers used by this plan.
             
             Identifiers used by this part of the plan. These can be both identifiers introduce by you, or automatically
             generated identifiers.
            
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IPlan.Children">
            <summary>
            Gets zero or more child plans.
            
            A plan is a tree, where each child is another plan. The children are where
            this part of the plan gets its input records - unless this is an <see cref="P:Neo4j.Driver.V1.IPlan.OperatorType"/> that introduces
            new records on its own.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IProfiledPlan">
            <summary>
            This is the same as a regular <see cref="T:Neo4j.Driver.V1.IPlan"/> - except this plan has been executed, meaning it also contains detailed information about how much work each
            step of the plan incurred on the database.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IProfiledPlan.DbHits">
            <summary>
            Gets the number of times this part of the plan touched the underlying data stores
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IProfiledPlan.Records">
            <summary>
            Gets the number of records this part of the plan produced
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IProfiledPlan.Children">
            <summary>
            Gets zero or more child profiled plans.
            
            A profiled plan is a tree, where each child is another profiled plan. The children are where
            this part of the plan gets its input records - unless this is an <see cref="P:Neo4j.Driver.V1.IPlan.OperatorType"/> that introduces
            new records on its own.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IRecord">
            <summary>
             A record contains ordered key and value pairs
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IRecord.Item(System.Int32)">
            <summary>
            Gets the value at the given index.
            </summary>
            <param name="index">The index</param>
            <returns>The value specified with the given index.</returns>
        </member>
        <member name="P:Neo4j.Driver.V1.IRecord.Item(System.String)">
            <summary>
            Gets the value specified by the given key.
            </summary>
            <param name="key">The key</param>
            <returns>the value spcified with the given key.</returns>
        </member>
        <member name="P:Neo4j.Driver.V1.IRecord.Values">
            <summary>
            Gets the key and value pairs in a <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/>.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IRecord.Keys">
            <summary>
            Gets the keys in a <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IStatementResult">
            <summary>
            Provides access to the result as an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Neo4j.Driver.V1.IRecord"/>s.
            The records in the result is lazily retrived and could only be visited once.
            </summary>
            <remarks> Calling <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> will enumerate the entire stream.</remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.IStatementResult.Keys">
            <summary>
            Gets the keys in the result.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IStatementResult.Summary">
            <summary>
            Gets the <see cref="T:Neo4j.Driver.V1.IResultSummary"/> after streaming the whole records to the client. 
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this is called before all the records have been visited.</exception>
        </member>
        <member name="M:Neo4j.Driver.V1.IStatementResult.Peek">
            <summary>
            Investigate the next upcoming record without changing the current position in the result.
            </summary>
            <returns>The next record, or null if there is no next record.</returns>
        </member>
        <member name="M:Neo4j.Driver.V1.IStatementResult.Consume">
            <summary>
            Consume the entire result, yielding a summary of it.
            Calling this method exhausts the result.
            </summary>
            <returns>A summary for running the statement.</returns>
            <remarks>This method could be called multiple times. If no more record could be consumed then calling this method has the same effect of calling <see cref="P:Neo4j.Driver.V1.IStatementResult.Summary"/>.</remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.StatementType">
            <summary>
            The type of a statement.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.IResultSummary">
             <summary>
             
             The result summary of running a statement. The result summary interface can be used to investigate
             details about the result, like the type of query run, how many and which kinds of updates have been executed,
             and query plan and profiling information if available.
            
             The result summary is only available after all result records have been consumed.
            
             Keeping the result summary around does not influence the lifecycle of any associated session and/or transaction.
             </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.Statement">
            <summary>
            Gets statement that has been executed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.Counters">
            <summary>
            Gets statistics counts for the statement.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.StatementType">
            <summary>
            Gets type of statement that has been executed.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.HasPlan">
            <summary>
            Gets if the result contained a statement plan or not, i.e. is the summary of a Cypher <c>PROFILE</c> or <c>EXPLAIN</c> statement.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.HasProfile">
            <summary>
            Gets if the result contained profiling information or not, i.e. is the summary of a Cypher <c>PROFILE</c> statement.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.Plan">
            <summary>
            Gets statement plan for the executed statement if available, otherwise null.
            </summary>
            <remarks>
            This describes how the database will execute your statement.
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.Profile">
            <summary>
            Gets profiled statement plan for the executed statement if available, otherwise null.
            </summary>
            <remarks>
            This describes how the database did execute your statement.
            
            If the statement you executed (<see cref="P:Neo4j.Driver.V1.IResultSummary.HasProfile"/> was profiled), the statement plan will contain detailed
            information about what each step of the plan did. That more in-depth version of the statement plan becomes
            available here.
            
            </remarks>
        </member>
        <member name="P:Neo4j.Driver.V1.IResultSummary.Notifications">
            <summary>
            Gets a list of notifications produced while executing the statement. The list will be empty if no
            notifications produced while executing the statement.
            </summary>
            <remarks>
            A list of notifications that might arise when executing the statement.
            Notifications can be warnings about problematic statements or other valuable information that can be presented
            in a client.
            
            Unlike failures or errors, notifications do not affect the execution of a statement.
            
            </remarks>
        </member>
        <member name="T:Neo4j.Driver.V1.LogLevel">
            <summary>
            The logging levels that could be used by a logger.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.ILogger">
            <summary>
            The logger used by this driver. 
            This interface is expected to be implemented by users to access the logs generated by the driver.
            </summary>
            <remarks>
            Set the logger that you want to use via <see cref="T:Neo4j.Driver.V1.Config"/>.
            If no logger is explicitly set, then a default debug logger would be used <see cref="P:Neo4j.Driver.V1.Config.DefaultConfig"/></remarks>
        </member>
        <member name="M:Neo4j.Driver.V1.ILogger.Error(System.String,System.Exception,System.Object[])">
            <summary>Log a message at <see cref="F:Neo4j.Driver.V1.LogLevel.Error"/> level.</summary>
            <param name="message">The error message.</param>
            <param name="cause">The cause of the error.</param>
            <param name="restOfMessage">Any <paramref name="restOfMessage"/> parts of the message.</param>
        </member>
        <member name="M:Neo4j.Driver.V1.ILogger.Info(System.String,System.Object[])">
            <summary>Log a message at <see cref="F:Neo4j.Driver.V1.LogLevel.Info"/> level.</summary>
            <param name="message">The message.</param>
            <param name="restOfMessage">Any <paramref name="restOfMessage"/> parts of the message.</param>
        </member>
        <member name="M:Neo4j.Driver.V1.ILogger.Debug(System.String,System.Object[])">
            <summary>Log a message at <see cref="F:Neo4j.Driver.V1.LogLevel.Debug"/> level.</summary>
            <param name="message">The message.</param>
            <param name="restOfMessage">Any <paramref name="restOfMessage"/> parts of the message, including (but not limited to) Sent Messages and Received Messages.</param>
        </member>
        <member name="M:Neo4j.Driver.V1.ILogger.Trace(System.String,System.Object[])">
            <summary>Log a message at <see cref="F:Neo4j.Driver.V1.LogLevel.Trace"/> level</summary>
            <param name="message">The message.</param>
            <param name="restOfMessage">
            Any <paramref name="restOfMessage"/> parts of the message, 
            including (but not limited to) byte buffer to send/receive data over the connection, 
            offset in byte buffer, the length of bytes in the buffer.
            </param>
        </member>
        <member name="P:Neo4j.Driver.V1.ILogger.Level">
            <summary>
            Gets and sets the level of this <see cref="T:Neo4j.Driver.V1.ILogger"/>
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.ISession">
             <summary>
             A live session with a Neo4j instance.
            
             Sessions serve two purposes. For one, they are an optimization. By keeping state on the database side, we can
             avoid re-transmitting certain metadata over and over.
            
             Sessions also serve a role in transaction isolation and ordering semantics. Neo4j requires
             "sticky sessions", meaning all requests within one session must always go to the same Neo4j instance.
            
             Session objects are not thread safe, if you want to run concurrent operations against the database,
             simply create multiple sessions objects.
             </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.ISession.BeginTransaction">
             <summary>
             Begin a new transaction in this session. A session can have at most one transaction running at a time, if you
             want to run multiple concurrent transactions, you should use multiple concurrent sessions.
             
             All data operations in Neo4j are transactional. However, for convenience we provide a <see cref="M:Neo4j.Driver.V1.IStatementRunner.Run(Neo4j.Driver.V1.Statement)"/>
             method directly on this session interface as well. When you use that method, your statement automatically gets
             wrapped in a transaction.
            
             If you want to run multiple statements in the same transaction, you should wrap them in a transaction using this
             method.
            
             </summary>
             <returns>A new transaction.</returns>
        </member>
        <member name="T:Neo4j.Driver.V1.IStatementRunner">
            <summary>
             Common interface for components that can execute Neo4j statements.
            </summary>
            <remarks>
            <see cref="T:Neo4j.Driver.V1.ISession"/> and <see cref="T:Neo4j.Driver.V1.ITransaction"/>
            </remarks>
        </member>
        <member name="M:Neo4j.Driver.V1.IStatementRunner.Run(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
             <summary>
             
             Run a statement and return a result stream.
            
             This method accepts a String representing a Cypher statement which will be 
             compiled into a query object that can be used to efficiently execute this
             statement multiple times. This method optionally accepts a set of parameters
             which will be injected into the query object statement by Neo4j. 
            
             </summary>
             <param name="statement">A Cypher statement.</param>
             <param name="parameters">Input parameters for the statement.</param>
             <returns>A stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.V1.IStatementRunner.Run(Neo4j.Driver.V1.Statement)">
             <summary>
            
             Execute a statement and return a result stream.
            
             </summary>
             <param name="statement">A Cypher statement, <see cref="T:Neo4j.Driver.V1.Statement"/>.</param>
             <returns>A stream of result values and associated metadata.</returns>
        </member>
        <member name="M:Neo4j.Driver.V1.IStatementRunner.Run(System.String,System.Object)">
            <summary>
            Execute a statement and return a result stream.
            </summary>
            <param name="statement">A Cypher statement.</param>
            <param name="parameters">A parameter dictonary which is made of prop.Name=prop.Value pairs would be created.</param>
            <returns>A stream of result values and associated metadata.</returns>
        </member>
        <member name="T:Neo4j.Driver.V1.ITransaction">
             <summary>
             Represents a transaction in the Neo4j database.
            
             This interface may seem surprising in that it does not have explicit <c>Commit</c> or <c>Rollback</c> methods.
             It is designed to minimize the complexity of the code you need to write to use transactions in a safe way, ensuring
             that transactions are properly rolled back even if there is an exception while the transaction is running.
             </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.ITransaction.Success">
            <summary>
            Mark this transaction as successful. You must call this method before calling <see cref="M:System.IDisposable.Dispose"/> to have your
            transaction committed.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.ITransaction.Failure">
             <summary>
             Mark this transaction as failed. Calling <see cref="M:System.IDisposable.Dispose"/> will roll back the transaction.
            
             Marking a transaction as failed is irreversable and guarantees that subsequent calls to <see cref="M:Neo4j.Driver.V1.ITransaction.Success"/> will not change it's status.
             </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.Statement">
            <summary>
            An executable statement, i.e. the statements' text and its parameters.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Statement.Text">
            <summary>
            Gets the statement's text.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.Statement.Parameters">
            <summary>
            Gets the statement's parameters.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.Statement.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a statemete
            </summary>
            <param name="text">The statement's text</param>
            <param name="parameters">The statement's parameters, whoes values should not be changed while the statement is used in a session/transaction.</param>
        </member>
        <member name="T:Neo4j.Driver.V1.ICounters">
            <summary>
            Represents the changes to the database made as a result of a statement being run.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.ContainsUpdates">
            <summary>
            Gets whether there were any updates at all, eg. any of the counters are greater than 0.
            </summary>
            <value>Returns <c>true</c> if the statement made any updates, <c>false</c> otherwise.</value>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.NodesCreated">
            <summary>
            Gets the number of nodes created.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.NodesDeleted">
            <summary>
            Gets the number of nodes deleted.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.RelationshipsCreated">
            <summary>
            Gets the number of relationships created.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.RelationshipsDeleted">
            <summary>
            Gets the number of relationships deleted.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.PropertiesSet">
            <summary>
            Gets the number of properties (on both nodes and relationships) set.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.LabelsAdded">
            <summary>
            Gets the number of labels added to nodes.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.LabelsRemoved">
            <summary>
            Gets the number of labels removed from nodes.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.IndexesAdded">
            <summary>
            Gets the number of indexes added to the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.IndexesRemoved">
            <summary>
            Gets the number of indexes removed from the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.ConstraintsAdded">
            <summary>
            Gets the number of constraints added to the schema.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.V1.ICounters.ConstraintsRemoved">
            <summary>
            Gets the number of constraints removed from the schema.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.V1.ValueExtensions">
            <summary>
            A collection of extensions to process values streamed back via Bolt.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.V1.ValueExtensions.As``1(System.Object)">
            <summary>
            A helper method to explicitly cast the value streamed back via Bolt to a local type.
            </summary>
            <typeparam name="T">
            Supports for the following types (or nullable version of the following types if applies):
            <see cref="T:System.Int16"/>,
            <see cref="T:System.Int32"/>,
            <see cref="T:System.Int64"/>,
            <see cref="T:System.Single"/>,
            <see cref="T:System.Double"/>,
            <see cref="T:System.SByte"/>,
            <see cref="T:System.UInt16"/>,
            <see cref="T:System.UInt32"/>,
            <see cref="T:System.UInt64"/>,
            <see cref="T:System.Byte"/>,
            <see cref="T:System.Char"/>,
            <see cref="T:System.Boolean"/>,
            <see cref="T:System.String"/>, 
            <see cref="T:System.Collections.Generic.List`1"/>,
            <see cref="T:Neo4j.Driver.V1.INode"/>,
            <see cref="T:Neo4j.Driver.V1.IRelationship"/>,
            <see cref="T:Neo4j.Driver.V1.IPath"/>.
            Undefined support for other types that are not listed above.
            No support for user-defined types, e.g. Person, Movie.
            </typeparam>
            <param name="value">The value that streamed back via Bolt protocol, e.g.<see cref="P:Neo4j.Driver.V1.IEntity.Properties"/>.</param>
            <returns>The value of specified return type.</returns>
            <remarks>Throws <see cref="T:System.InvalidCastException"/> if the specified cast is not possible.</remarks>
        </member>
        <member name="T:Neo4j.Driver.Internal.AuthToken">
            <summary>
                A simple common token for authentication schemes that easily convert to an auth token map
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Result.IRecordSet">
            <summary>
            A record set represents a set of records where only forward enumeration is possible.
            A record is considered consumed when it has been visited by enumeration. 
            It will not be available by any other future enumerations.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.Result.IRecordSet.AtEnd">
            <summary>
            Returns true if this set contains no elements to consume.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Result.IRecordSet.Peek">
            <summary>
            Reterives the next <see cref="T:Neo4j.Driver.V1.IRecord"/>  without consuming it or returns null if the set is empty.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Result.IRecordSet.Records">
            <summary>
            Returns an IEnumerable of records.
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Result.Notification">
            <summary>
            This is a notifcation
            </summary>
        </member>
        <member name="T:Neo4j.Driver.Internal.Result.StatementResult">
            <summary>
            The result returned from the Neo4j instance
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.ByteExtensions.ToByteArray(System.String)">
            <summary>
            Takes the format: 00 00 00 and converts to a byte array.
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="T:Neo4j.Driver.Internal.ISegment">
            <summary>
               
            A <c>Segment</c> combines a relationship in a path with a start and end node that describe the traversal direction
            for that relationship. This exists because the relationship has a direction between the two nodes that is
            separate and potentially different from the direction of the path.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.ISegment.Start">
            <summary>
            Gets the start node underlying this path segment.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.ISegment.End">
            <summary>
            Gets the end node underlying this path segment.
            </summary>
        </member>
        <member name="P:Neo4j.Driver.Internal.ISegment.Relationship">
            <summary>
            Gets the relationship underlying this path segment.
            </summary>
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.Active">
            The transaction is running with no explicit success or failure marked 
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.MarkedSuccess">
            Running, user marked for success, meaning it'll value committed 
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.MarkedFailed">
            User marked as failed, meaning it'll be rolled back. 
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.Failed">
            An error has occurred, transaction can no longer be used and no more messages will be sent for this
            transaction.
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.Succeeded">
            This transaction has successfully committed 
        </member>
        <member name="F:Neo4j.Driver.Internal.Transaction.State.RolledBack">
            This transaction has been rolled back 
        </member>
        <member name="T:Neo4j.Driver.Internal.Packstream.BigEndianTargetBitConverter">
            <summary>
                Converts from/to big endian (target) to platform endian.
            </summary>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BigEndianTargetBitConverter.ToTargetEndian(System.Byte[])">
            <summary>
                Converts the bytes to big endian.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to big endian.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BigEndianTargetBitConverter.ToPlatformEndian(System.Byte[])">
            <summary>
                Converts the bytes to the platform endian type.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to the platform endian type.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.Byte)">
            <summary>
                Converts a byte to bytes.
            </summary>
            <param name="value">The byte value to convert.</param>
            <returns>The specified byte value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.Int16)">
            <summary>
                Converts a shot (Int16) to bytes.
            </summary>
            <param name="value">The short (Int16) value to convert.</param>
            <returns>The specified short (Int16) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.UInt16)">
            <summary>
                Converts a shot (UInt16) to bytes.
            </summary>
            <param name="value">The short (UInt16) value to convert.</param>
            <returns>The specified short (UInt16) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.Int32)">
            <summary>
                Converts an int (Int32) to bytes.
            </summary>
            <param name="value">The int (Int32) value to convert.</param>
            <returns>The specified int (Int32) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.UInt32)">
            <summary>
                Converts an uint (UInt32) to bytes.
            </summary>
            <param name="value">The uint (UInt32) value to convert.</param>
            <returns>The specified uint (UInt32) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.Int64)">
            <summary>
                Converts an int (Int64) to bytes.
            </summary>
            <param name="value">The int (Int64) value to convert.</param>
            <returns>The specified int (Int64) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.Double)">
            <summary>
                Converts an int (double) to bytes.
            </summary>
            <param name="value">The int (double) value to convert.</param>
            <returns>The specified int (double) value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.GetBytes(System.String)">
            <summary>
                Converts an string to bytes.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>The specified string value as an array of bytes.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToInt16(System.Byte[])">
            <summary>
                Converts an byte array to a short.
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A short converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToInt32(System.Byte[])">
            <summary>
                Converts an byte array to a int (Int32).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (Int32) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToInt64(System.Byte[])">
            <summary>
                Converts an byte array to a int (Int64).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (Int64) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToDouble(System.Byte[])">
            <summary>
                Converts an byte array to a int (double).
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A int (double) converted from the byte array.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToString(System.Byte[])">
            <summary>
                Converts an byte array of a UTF8 encoded string to a string
            </summary>
            <param name="bytes">The byte array to convert.</param>
            <returns>A string converted from the byte array</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToTargetEndian(System.Byte[])">
            <summary>
                Converts the bytes to the target endian type.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to the targert endian type.</returns>
        </member>
        <member name="M:Neo4j.Driver.Internal.Packstream.BitConverterBase.ToPlatformEndian(System.Byte[])">
            <summary>
                Converts the bytes to the platform endian type.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <returns>The bytes converted to the platform endian type.</returns>
        </member>
    </members>
</doc>
